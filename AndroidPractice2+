//gradle.app에서 버전 확인 필수!

package com.example.practice2

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.widget.Button
import android.widget.EditText
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AlertDialog
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.app.TaskStackBuilder
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {

    //버튼을 누를때마다 숫자를 ++하기 위한 변수선언
    var count : Int  = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        //send notification 버튼
        val button = findViewById<Button>(R.id.button)
        button.setOnClickListener {
            showNotification()
        }

        val editText = findViewById<EditText>(R.id.editText)

        //notify 버튼
        val button2 = findViewById<Button>(R.id.button2)
        button2.setOnClickListener {
            //editText에서 text를 읽어드리는 부분
            val name:String = editText.text.toString()
            showNotification2(name) //알림에다가 editText에서 불러들어온 값 넘겨줌
        }

        //권한요청
        requestSinglePermission(Manifest.permission.POST_NOTIFICATIONS)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { // Android 8.0
            createNotificationChannel()
        }
    }

    private val channelID = "default"
    private val channel2ID = "ad"

    private fun showNotification() {
        count += 1
        val builder = NotificationCompat.Builder(this, channelID)
            .setSmallIcon(R.mipmap.ic_launcher)
            .setContentTitle("Notification Lab")
            .setContentText("Notification # $count")
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
        NotificationManagerCompat.from(this)
            .notify(1, builder.build())
    }

    private fun showNotification2(name:String) {
        val builder = NotificationCompat.Builder(this, channel2ID)
            .setSmallIcon(R.mipmap.ic_launcher)
            .setContentTitle("Notification Lab2")
            .setContentText(name) //넘겨받은 값을 알림
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
        NotificationManagerCompat.from(this)
            .notify(2, builder.build())
    }

    @RequiresApi(Build.VERSION_CODES.O)

    private fun createNotificationChannel() {
        //각각의 알림마다 채널명을 다르게 하기위해 두개 선언
        val channel = NotificationChannel(
            channelID, "default channel",
            NotificationManager.IMPORTANCE_DEFAULT
        )
        channel.description = "디폴트 채널."

        val channel2 = NotificationChannel(
            channel2ID, "ad channel",
            NotificationManager.IMPORTANCE_DEFAULT
        )
        channel2.description = "ad 채널."

        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)
        notificationManager.createNotificationChannel(channel2)
        //채널명이 두개이므로 각각의 notificationManager 선언
    }

    private fun requestSinglePermission(permission: String) {
        if (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED)
            return

        val requestPermLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) {
            if (it == false) { // permission is not granted!
                AlertDialog.Builder(this).apply {
                    setTitle("Warning")
                    setMessage("Warning")
                }.show()
            }
        }

        if (shouldShowRequestPermissionRationale(permission)) {
            // you should explain the reason why this app needs the permission.
            AlertDialog.Builder(this).apply {
                setTitle("Reason")
                setMessage("Reason")
                setPositiveButton("Allow") { _, _ -> requestPermLauncher.launch(permission) }
                setNegativeButton("Deny") { _, _ -> }
            }.show()
        } else {
            // should be called in onCreate()
            requestPermLauncher.launch(permission)
        }
    }
}
